# The ingress configuration can also from from globals
# This is mainly to reduce duplication when integrating with Azimuth
# In the future, other consumers could adopt the same conventions to reduce duplication when defining ingress
global:
  ingress:
    # The base domain to use for services exposed by Zenith
    # Proxied services will be made available at <subdomain>.<base domain>
    baseDomain:
    #: Indicates whether the subdomain should be used as a path prefix
    subdomainAsPathPrefix: false
    # The ingress class to use
    className: nginx
    # The common annotations for all ingress resources
    annotations: {}
    # The TLS configuration
    tls:
      # Indicates if TLS should be enabled
      enabled: true
      # Indicates if the ingress controller is itself behind a proxy that is terminating TLS
      terminatedAtProxy: false
      # The name of a secret containing a wildcard certificate
      secretName:
      # TLS-specific annotations for ingress resources
      annotations: {}

# Common configuration
common:
  # Ingress configuration
  # This overrides global.ingress, and can be overridden by component-specific settings
  ingress: {}
  # Common Kubernetes configuration
  kubernetes:
    # The target namespace for Zenith services
    targetNamespace: zenith-services

sync:
  enabled: true
  # Configuration for the sync component
  config:
    kubernetes:
      ingress:
        oidc:
          injectRequestHeaders:
            X-Remote-User: preferred_username
            X-Remote-Group: groups
            # To inject the id and/or access tokens in the named headers, include the following:
            # X-Auth-ID-Token: id_token
            # X-Auth-Access-Token: access_token
  # The image to use for the sync component
  image:
    repository: ghcr.io/azimuth-cloud/zenith-sync
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  imagePullSecrets: []
  # Customise pod-level security context for sync pods
  podSecurityContext:
    runAsNonRoot: true
  # Customise container-level security context for sync pods
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
  # Resources for sync containers
  resources: {}
  # Customise annotations for sync pods
  podAnnotations: {}
  # Customise node selector for sync pods
  nodeSelector: {}
  # Customise tolerations for sync pods
  tolerations: []
  # Customise affinity rules for sync pods
  affinity: {}

sshd:
  enabled: true
  # Config for the SSHD server
  config: {}
  # The image to use for the SSHD server
  image:
    repository: ghcr.io/azimuth-cloud/zenith-sshd
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  imagePullSecrets: []
  # The number of SSHD replicas to use
  replicaCount: 3
  # Customise annotations for SSHD pods
  podAnnotations: {}
  # Customise pod-level security context for SSHD pods
  podSecurityContext:
    runAsNonRoot: true
  # Customise container-level security context for SSHD pods
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
  # The service definition for SSHD
  # Because SSH is a TCP service, it cannot be exposed with an Ingress
  # Instead, it must be exposed with a NodePort or LoadBalancer service
  service:
    type: LoadBalancer
    port: 22
    # Specify annotations for the service
    # annotations:
    # Use a fixed node port
    # nodePort: 32222
    # Use a fixed load-balancer IP
    # loadBalancerIP:
  # Resources for SSHD containers
  resources: {}
  # Customise node selector for SSHD pods
  nodeSelector: {}
  # Customise tolerations for SSHD pods
  tolerations: []
  # Customise affinity rules for SSHD pods
  affinity: {}


registrar:
  enabled: true
  # The registrar configuration
  config:
    baseDomain: "{{ pluck \"baseDomain\" .Values.common.ingress .Values.global.ingress | first }}"
    reservedSubdomains: []
  # The registrar ingress configuration
  ingress:
    # The subdomain that will be reserved for the registrar
    subdomain: registrar
  # The image to use for the registrar
  image:
    repository: ghcr.io/azimuth-cloud/zenith-registrar
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  imagePullSecrets: []
  # The number of replicas to use
  replicaCount: 1
  # Customise annotations for pods
  podAnnotations: {}
  # Customise pod-level security context for registrar pods
  podSecurityContext:
    runAsNonRoot: true
  # Customise container-level security context for registrar pods
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
  # Resources for containers
  resources: {}
  # Customise node selector for pods
  nodeSelector: {}
  # Customise tolerations for pods
  tolerations: []
  # Customise affinity rules for pods
  affinity: {}

metrics:
  enabled: false
  # Configuration for the dashboard
  dashboard:
    enabled: true
    labels:
      grafana_dashboard: "1"
  prometheus:
    rules:
      enabled: true
    monitor:
      enabled: true
