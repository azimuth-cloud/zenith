# Configuration for Consul
# See https://www.consul.io/docs/k8s/helm
consul:
  # Whether or not to deploy a Consul instance
  enabled: true

# The ingress configuration can also from from globals
# This is mainly to reduce duplication when integrating with Azimuth
# In the future, other consumers could adopt the same conventions to reduce duplication when defining ingress
global:
  ingress:
    # The base domain to use for services exposed by Zenith
    # Proxied services will be made available at <subdomain>.<base domain>
    baseDomain:
    # The ingress class to use
    className: nginx
    # The common annotations for all ingress resources
    annotations: {}
    # The TLS configuration
    tls:
      # Indicates if TLS should be enabled
      enabled: true
      # The name of a secret containing a wildcard certificate
      secretName:
      # TLS-specific annotations for ingress resources
      annotations: {}

# Common configuration
common:
  # Ingress configuration
  # This overrides global.ingress, and can be overridden by component-specific settings
  ingress: {}
  # Consul configuration
  consul:
    # The address of the Consul server
    address: "{{ .Release.Name }}-consul-server"
    # The port of the Consul server
    port: 8500
    # The tag to use for identifying Zenith services in Consul
    serviceTag: "zenith-service"
    # The prefix to use for additional service information for Zenith services in Consul KV
    serviceKeyPrefix: "zenith/services"
    # The prefix to use for registrar information in Consul KV
    registrarKeyPrefix: "zenith"

sync:
  enabled: true
  # Configuration for the sync component
  # Defaults are taken from the common configuration where appropriate
  config:
    # The Consul configuration
    # consul:
    #   # The address of the Consul server
    #   address:
    #   # The port of the Consul server
    #   port:
    #   # The tag to use for identifying Zenith services in Consul
    #   serviceTag:
    #   # The prefix to use for Zenith service config in Consul KV
    #   configKeyPrefix:
    #   # The timeout to use with Consul blocking queries
    #   blockingQueryTimeout:
    # The Kubernetes configuration
    kubernetes:
      # The namespace to create resources in for Zenith services
      targetNamespace: zenith-services
      ingress: {}
        # # The base domain to use for services exposed by Zenith
        # baseDomain:
        # # The ingress class to use
        # className:
        # # The annotations to use - these are merged with the common annotations
        # annotations:
        # # The TLS configuration
        # tls:
        #   # Indicates if TLS should be enabled (default true)
        #   enabled:
        #   # The name of a secret containing a wildcard certificate
        #   secretName:
        #   # TLS-specific annotations
        #   annotations:
        # # The OIDC auth configuration
        # oidc:
        #   # Indicates if OIDC credential discovery should be enabled
        #   discoveryEnabled: true
        #   # The Helm chart to use for the oauth2-proxy that provides OIDC auth for services
        #   oauth2ProxyChartRepo:
        #   oauth2ProxyChartName:
        #   oauth2ProxyChartVersion:
        #   # The default values for the oauth2-proxy releases for OIDC-authenticated services
        #   oauth2ProxyDefaultValues: {}
        # # The external auth configuration
        # externalAuth:
        #   # The URL for verifying incoming requests
        #   url:
        #   # The URL to redirect to when the verify URL returns a 401
        #   # If not set, the 401 will just be returned
        #   signinUrl:
        #   # The URL parameter to contain the original URL when redirecting to the signin URL
        #   nextUrlParam: next
        #   # Dictionary of headers to set for authentication requests
        #   # These will override headers from the incoming request, which would otherwise be forwarded
        #   # In particular, you may need to override the accepts header to suit the content types served
        #   # by the external authentication service
        #   requestHeaders: {}
        #   # List of headers from the authentication response to add to the upstream request
        #   responseHeaders: []
  # The image to use for the sync component
  image:
    repository: ghcr.io/stackhpc/zenith-sync
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  imagePullSecrets: []
  # Customise pod-level security context for sync pods
  podSecurityContext:
    runAsNonRoot: true
  # Customise container-level security context for sync pods
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
  # Resources for sync containers
  resources: {}
  # Customise annotations for sync pods
  podAnnotations: {}
  # Customise node selector for sync pods
  nodeSelector: {}
  # Customise tolerations for sync pods
  tolerations: []
  # Customise affinity rules for sync pods
  affinity: {}

sshd:
  enabled: true
  config: {}
    # The address of the Consul agent
    # consulAddress:
    # The port of the Consul agent
    # consulPort:
    # The heartbeat interval for services created in Consul
    # consulHeartbeatInterval:
    # The interval after which a service in Consul will be deregistered
    # consulDeregisterInterval:
    # The number of times that posting a heartbeat to Consul can fail before a tunnel is closed
    # consulHeartbeatFailures:
    # The prefix to use for additional service information for Zenith services in Consul KV
    # consulKeyPrefix:
    # The tag to use when registering services with Consul
    # serviceTag:
    # The number of seconds to wait to receive a tunnel configuration before exiting
    # configureTimeout:
  # The image to use for the SSHD server
  image:
    repository: ghcr.io/stackhpc/zenith-sshd
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  imagePullSecrets: []
  # The number of SSHD replicas to use
  replicaCount: 1
  # Customise annotations for SSHD pods
  podAnnotations: {}
  # Customise pod-level security context for SSHD pods
  podSecurityContext:
    runAsNonRoot: true
  # Customise container-level security context for SSHD pods
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
  # The service definition for SSHD
  # Because SSH is a TCP service, it cannot be exposed with an Ingress
  # Instead, it must be exposed with a NodePort or LoadBalancer service
  service:
    type: LoadBalancer
    port: 22
    # Specify annotations for the service
    # annotations:
    # Use a fixed node port
    # nodePort: 32222
    # Use a fixed load-balancer IP
    # loadBalancerIP:
  # Resources for SSHD containers
  resources: {}
  # Customise node selector for SSHD pods
  nodeSelector: {}
  # Customise tolerations for SSHD pods
  tolerations: []
  # Customise affinity rules for SSHD pods
  affinity: {}


registrar:
  enabled: true
  # The registrar configuration
  config:
    # The key that is used to sign the subdomain tokens
    # subdomainTokenSigningKey:
    # The shared token that is permitted to reserve subdomains
    # reserveToken:
    # The shared token that is permitted to verify SSH public keys
    # verifyToken:
    # The base domain used for Zenith services
    baseDomain: "{{ pluck \"baseDomain\" .Values.common.ingress .Values.global.ingress | first }}"
    # A list of subdomains that are reserved and cannot be used for Zenith services
    reservedSubdomains: []
    # The set of allowed SSH key types
    # sshAllowedKeyTypes: [ssh-rsa, ssh-ed25519, ...] 
    # The minimum size for RSA keys
    # sshRsaMinBits:
    # The address of the Consul server
    # consulAddress:
    # The port of the Consul server
    # consulPort:
    # The prefix to use for Consul keys (different to the service prefix)
    # consulKeyPrefix:
  # The registrar ingress configuration
  ingress:
    # The subdomain that will be reserved for the registrar
    subdomain: registrar
    # The host for the ingress resource
    # host:
    # The annotations for the ingress resource
    # annotations:
    # The class name for the ingress resource
    # className:
    # The TLS configuration for the ingress resource
    # tls:
      # Indicates whether TLS should be enabled for the ingress resource
      # enabled: true
      # The name of a secret containing a wildcard certificate, if required
      # secretName:
  # The image to use for the registrar
  image:
    repository: ghcr.io/stackhpc/zenith-registrar
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  imagePullSecrets: []
  # The number of replicas to use
  replicaCount: 1
  # Customise annotations for pods
  podAnnotations: {}
  # Customise pod-level security context for registrar pods
  podSecurityContext:
    runAsNonRoot: true
  # Customise container-level security context for registrar pods
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
  # Resources for containers
  resources: {}
  # Customise node selector for pods
  nodeSelector: {}
  # Customise tolerations for pods
  tolerations: []
  # Customise affinity rules for pods
  affinity: {}

metrics:
  enabled: false
  # Configuration for the consul exporter
  consulExporter:
    # The image to use for the consul exporter
    # We use a synced version to avoid a dependency on Docker Hub
    # When we sync, we retag with the commit SHA for consistency
    image:
      repository: ghcr.io/stackhpc/consul-exporter
      pullPolicy: IfNotPresent
      tag: ""  # Defaults to appVersion if not given
    imagePullSecrets: []
    # Customise pod-level security context for sync pods
    podSecurityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
    # Customise container-level security context for sync pods
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: [ALL]
      readOnlyRootFilesystem: true
    # Resources for sync containers
    resources: {}
    # Customise annotations for sync pods
    podAnnotations: {}
    # Customise node selector for sync pods
    nodeSelector: {}
    # Customise tolerations for sync pods
    tolerations: []
    # Customise affinity rules for sync pods
    affinity: {}
