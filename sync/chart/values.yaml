# Use globals for any values that need to be shared with the OIDC subchart
global:
  # The configured base domain
  baseDomain:
  # The subdomain to use for the service
  subdomain:
  # Indicates if the service should be secured using TLS
  secure: true
  # Indicates if the service should use the subdomain as a path prefix
  # or an actual subdomain
  subdomainAsPathPrefix: false

# The endpoints for the service
endpoints: []
  # - address: 10.0.0.1
  #   port: 31234

# The protocol for the service
protocol: http

# The read timeout for the service
readTimeout:

# Settings for the ingress
ingress:
  # The ingress class name to use
  className: nginx
  # The annotations to use with the ingress
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
  # The TLS configuration for the ingress
  tls:
    # Indicates if the ingress controller is itself behind a proxy that is terminating TLS
    terminatedAtProxy: false
    # TLS-specific annotations
    # Only used if no existing certificate is given, e.g. to configure cert-manager
    annotations: {}
    # The name of the TLS service (defaults to tls-<service> if not given)
    secretName:
    # The certificate and key of an existing TLS certificate to use
    existingCertificate:
      cert:
      key:
    # The certificate authority to use to validate client certificates
    clientCA:

# Configuration for an external auth provider
externalAuth:
  # Indicates whether an external auth provider is enabled
  enabled: false
  # The external authentication URL
  # This URL is called as a subrequest, and so will receive the original request body
  # and headers. If it returns a response with a 2xx status code, the request proceeds
  # to the upstream. If it returns a 401 or a 403, the access is denied.
  url:
  # The URL to redirect to on an authentication error
  signinUrl:
  #: The URL parameter to contain the original URL when redirecting to the signin URL
  nextUrlParam: next
  # Dictionary of headers to set for authentication requests
  # These will override headers from the incoming request, which would otherwise be forwarded
  # In particular, you may need to override the accepts header to suit the content types served
  # by the external authentication service
  requestHeaders: {}
  # List of headers from the authentication response to add to the upstream request
  responseHeaders: []
  # The prefix to use when passing auth parameters to the auth service as headers
  paramHeaderPrefix: x-
  # The auth parameters to pass to the auth service
  params: {}

# Configuration for OIDC authentication
oidc:
  # Indicates if OIDC authentication should be enabled
  enabled: false
  # Configuration for the OIDC provider
  provider:
    # The ID of the provider
    id: oidc
    # The type of the provider
    provider: oidc
    # The OIDC client ID
    clientID:
    # The OIDC client secret
    clientSecret:
    # List of groups to restrict access to
    allowedGroups: []
    # Parameters that will be forwarded from the OIDC start URL to the IdP login URL
    loginURLParameters: []
    oidcConfig:
      # The OIDC issuer URL
      issuerURL:
      # By default, we don't require an email claim to be present
      # To do this, we use a claim that is always present as the email address
      emailClaim: sub
      # We also allow unverified email addresses
      insecureAllowUnverifiedEmail: true
      groupsClaim: groups
      audienceClaims: ["aud"]
  # We use the alpha config in order to be able to use loginURLParameters
  alphaConfig:
    enabled: true
    # Static parts of the configuration
    configData:
      # This is the claims to return as headers from the response
      injectResponseHeaders: []
      # Just configure a "null" upstream as we are using it as an auth request
      upstreamConfig:
        upstreams:
          - id: static
            path: "/"
            static: true
    # We template the provider so that we can move the provider configuration
    # to a higher level and get the nice merging behaviour
    configFile: |
      providers:
        - {{ toYaml .Values.provider | nindent 6 }}
  # Disable the standard config
  config:
    configFile: ""
  proxyVarsAsSecrets: false
  # Some settings are only available as arguments
  extraArgs:
    # The path prefix to use for OAuth2 proxy endpoints
    proxy-prefix: >-
      {{- if .Values.global.subdomainAsPathPrefix -}}
      /{{ .Values.global.subdomain }}/_oidc
      {{- else -}}
      /_oidc
      {{- end -}}
    cookie-secret: "{{ fail \"cookie secret is required\" }}"
    # The length of time for which OAuth2 proxy cookies should last
    #   This determines the length of time until a user is forced to reauthenticate
    cookie-expire: 24h
    # The length of time after which an OAuth2 proxy cookie should be refreshed
    #   This determines the length of time until a user's permissions are re-checked,
    #   i.e. the length of time that a user *who already has a valid cookie* will be
    #   able to continue using the service after their access has been removed at the
    #   OIDC provider
    cookie-refresh: 1h
    # If the ingress is not using TLS, we have to allow the cookie on insecure connections
    cookie-secure: "{{ ternary \"true\" \"false\" .Values.global.secure }}"
    # Allow redirections to the service domain only
    whitelist-domain: "{{ .Values.global.domain }}"
    # We redirect to the callback endpoint on the service domain
    redirect-url: >-
      {{- $scheme := ternary "https" "http" .Values.global.secure -}}
      {{- $host := include "zenith-service.ingress.host" . -}}
      {{- $prefix := tpl (index .Values.extraArgs "proxy-prefix") . -}}
      {{- printf "%s://%s%s/callback" $scheme $host $prefix -}}
    # Allow any email address
    email-domain: "*"
    # Suppress access logs for the health check
    silence-ping-logging: "true"
    # Skip the "proceed to provider" screen on a re-authenticate
    skip-provider-button: "true"
  # We will always manage our own ingress for the _oidc path
  ingress:
    enabled: false
