#####
# This file is a Go template, rendered by gomplate at runtime
#####

{{- $authInject := getenv "ZENITH_PROXY_AUTH_INJECT" }}

{{- if eq $authInject "kubeapiserver" }}
load_module  modules/ngx_http_js_module.so;
{{- end }}

# Run Nginx in the foreground
daemon off;
# Run worker processes as the nginx user
user  nginx;

worker_processes  auto;

error_log  /var/log/nginx/error.log  {{ getenv "ZENITH_PROXY_LOG_LEVEL" "notice" }};
pid        /var/run/nginx/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # This is required for proxying websockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    {{- if eq $authInject "kubeapiserver" }}
    js_import  /etc/nginx/js/kubernetes_auth.js;
    js_set  $kubernetes_user    kubernetes_auth.user;
    js_set  $kubernetes_groups  kubernetes_auth.groups;
    {{- end }}

    server {
        listen       127.0.0.1:{{ getenv "ZENITH_PROXY_LISTEN_PORT" "8080" }};
        server_name  _;

        proxy_http_version  1.1;

        # Don't impose a maximum size on the client body
        client_max_body_size  0;
        client_body_buffer_size  128k;
        # Set a short connect timeout so we bail early when the backend is unreachable
        proxy_connect_timeout  5;
        # Turn off buffering - just send data directly back to the client
        proxy_buffering  off;

        {{- with getenv "ZENITH_PROXY_READ_TIMEOUT" }}
        proxy_read_timeout  {{ . }};
        {{- end }}

        # Set headers for the upstream service to consume
        proxy_set_header  Host  $host;
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
        # Headers for proxying websockets
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Set any required headers for the selected auth type
        {{- if eq $authInject "basic" }}
        {{- $username := getenv "ZENITH_PROXY_AUTH_BASIC_USERNAME" | required "No username specified" }}
        {{- $password := getenv "ZENITH_PROXY_AUTH_BASIC_PASSWORD" | required "No password specified" }}
        proxy_set_header Authorization "Basic {{ printf "%s:%s" $username $password | base64.Encode }}";
        {{- else if eq $authInject "bearer" }}
        {{- $headerName := getenv "ZENITH_PROXY_AUTH_BEARER_HEADER" "Authorization" }}
        {{- $prefix := getenv "ZENITH_PROXY_AUTH_BEARER_PREFIX" "Bearer" }}
        {{- $token := getenv "ZENITH_PROXY_AUTH_BEARER_TOKEN" | required "No bearer token specified" }}
        {{- $headerValue := eq $prefix "" | ternary $token (printf "%s %s" $prefix $token) }}
        proxy_set_header {{ $headerName }} "{{ $headerValue }}";
        {{- else if eq $authInject "kubeapiserver" }}
        proxy_set_header  {{ getenv "ZENITH_PROXY_AUTH_KUBEAPISERVER_USER_HEADER" "X-Remote-User" }}  $kubernetes_user;
        proxy_set_header  {{ getenv "ZENITH_PROXY_AUTH_KUBEAPISERVER_GROUP_HEADER" "X-Remote-Group" }}  $kubernetes_groups;
        {{- end }}

        # If a TLS certificate is specified for authenticating with the upstream, use it
        {{- $certPath := getenv "ZENITH_PROXY_CLIENT_CERTIFICATE_PATH" }}
        {{- if $certPath }}
        proxy_ssl_certificate  {{ $certPath }};
        {{- $keyPath := getenv "ZENITH_PROXY_CLIENT_CERTIFICATE_KEY_PATH" | required "No client certificate key path specified." }}
        proxy_ssl_certificate_key  {{ $keyPath }};
        {{- end }}

        location / {
            {{- $upstreamScheme := getenv "ZENITH_PROXY_UPSTREAM_SCHEME" "http" }}
            {{- $upstreamHost := getenv "ZENITH_PROXY_UPSTREAM_HOST" | required "No upstream host specified" }}
            {{- $upstreamPort := getenv "ZENITH_PROXY_UPSTREAM_PORT" | required "No upstream port specified" }}
            proxy_pass {{ $upstreamScheme }}://{{ $upstreamHost }}:{{ $upstreamPort }};
        }
    }
}
