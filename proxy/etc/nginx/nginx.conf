#####
## Template used to generate Nginx config with consul-template
#####

# Run Nginx in the foreground
daemon off;

worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    server_tokens off;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # Because we use a lot of potentially long domain names, we need to tweak
    #Â the server name hash settings (and allow them to be customised)
    # To understand how to tweak these, it is important to understand how a hash works
    # The values to be stored are hashed and the values whose hashes match are stored in the
    # same bucket, hence the bucket needs to be at least as big as your largest domain
    # Increasing the max size decreases the chance of hash collisions, which results in
    # faster accesses (as searching within a bucket is linear)
    # Increasing both values happens at the expense of memory consumption
    server_names_hash_bucket_size {{ or (env "NGINX_SERVER_NAMES_HASH_BUCKET_SIZE") "128" }};
    server_names_hash_max_size    {{ or (env "NGINX_SERVER_NAMES_HASH_MAX_SIZE") "4096" }};

    # Decide the value of the connection header
    # This is required to support proxying websockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Each service in Consul has an upstream and a server block for the domain
    {{- range services }}
    {{- if contains "tunnel-proxy-subdomain" .Tags }}
    # The upstream contains an entry for each instance of the service
    upstream {{ .Name }} {
        {{- range service .Name }}
        server {{ .Address }}:{{ .Port }};
        {{- end }}
    }

    server {
        listen 8080;
        server_name {{ .Name }}.{{ env "PROXY_BASE_DOMAIN" }};

        location / {
            # Set host and forwarded-for headers so the client can identify the source
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            # Enable proxying of websocket connections
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            # Turn off buffering - just send data directly to and from the client
            proxy_buffering off;
            # Proxy to the upstream for the service
            proxy_pass http://{{ .Name }};
        }
    }
    {{- end }}
    {{- end }}

    # Catch all block that returns 404 for unknown hosts
    server {
        # Using reuseport here allows the kernel to better distribute connections by
        # creating a listening port for each worker process
        listen 8080 default_server reuseport;
        server_name _;

        # The only responses for the default server are plain text
        add_header Content-Type text/plain always;

        # Return a 404 for all paths except for the health check
        location / {
            return 404 "404 - domain not found\n";
        }

        # For the health check endpoint, return a 200
        # We also disable access logging to avoid spamming the logs
        location /_health {
            access_log off;
            return 200 "healthy\n";
        }
    }
}
