#####
# This file is a Go template, rendered by gomplate at runtime
#####

# Run Nginx in the foreground
daemon off;

worker_processes  auto;

error_log  /var/log/nginx/error.log  notice;
pid        /var/run/nginx/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # This is required for proxying websockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen       127.0.0.1:{{ getenv "ZENITH_PROXY_LISTEN_PORT" "8080" }};
        server_name  _;

        # Don't impose a maximum size on the client body
        client_max_body_size  0;
        client_body_buffer_size  128k;
        # Set a short connect timeout so we bail early when the backend is unreachable
        proxy_connect_timeout  5;
        # Turn off buffering - just send data directly back to the client
        proxy_buffering  off;

        {{- with getenv "ZENITH_PROXY_READ_TIMEOUT" }}
        proxy_read_timeout: {{ . }}s;
        {{- end }}

        # Set headers for the upstream service to consume
        proxy_set_header  Host  $host;
        proxy_set_header  X-Real-IP  $remote_addr;
        # Headers for proxying websockets
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Set any required headers for the selected auth type
        {{- $authInject := getenv "ZENITH_PROXY_AUTH_INJECT" }}
        {{- if eq $authInject "bearer" }}
        {{- $prefix := getenv "ZENITH_PROXY_AUTH_BEARER_PREFIX" "Bearer" }}
        {{- $token := getenv "ZENITH_PROXY_AUTH_BEARER_TOKEN" | required "No bearer token specified" }}
        proxy_set_header Authorization "{{ $prefix }} {{ $token }}";
        {{- end }}

        location / {
            {{- $upstreamScheme := getenv "ZENITH_PROXY_UPSTREAM_SCHEME" "http" }}
            {{- $upstreamHost := getenv "ZENITH_PROXY_UPSTREAM_HOST" | required "No upstream host specified" }}
            {{- $upstreamPort := getenv "ZENITH_PROXY_UPSTREAM_PORT" | required "No upstream port specified" }}
            proxy_pass {{ $upstreamScheme }}://{{ $upstreamHost }}:{{ $upstreamPort }};
        }
    }
}
