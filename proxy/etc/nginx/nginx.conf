#####
## Template used to generate Nginx config with consul-template
#####

# Run Nginx in the foreground
daemon off;

worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    server_tokens off;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # Because we use potentially long names and expect a lot of domains, we need to
    # tweak the settings for the server name hash
    server_names_hash_bucket_size  128;

    # Decide the value of the connection header
    # This is required to support proxying websockets
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Each service in Consul has an upstream and a server block for the domain
    {{- range services }}
    {{- if contains "tunnel-proxy-subdomain" .Tags }}
    # The upstream contains an entry for each instance of the service
    upstream {{ .Name }} {
        {{- range service (printf "%s" .Name) }}
        server {{ .Address }}:{{ .Port }};
        {{- end }}
    }

    server {
        listen 8080;
        server_name {{ .Name }}.{{ env "PROXY_BASE_DOMAIN" }};

        location / {
            # Set host and forwarded-for headers so the client can identify the source
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            # Enable proxying of websocket connections
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            # Turn off buffering - just send data directly to and from the client
            proxy_buffering off;
            # Proxy to the upstream for the service
            proxy_pass http://{{ .Name }};
        }
    }
    {{- end }}
    {{- end }}

    # Catch all block that returns 404 for unknown hosts
    server {
        listen 8080 default_server;
        server_name _;
        return 404 '404 - domain not found';
        add_header Content-Type text/plain always;
    }
}
