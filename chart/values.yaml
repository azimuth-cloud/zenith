# Configuration for Consul
# See https://www.consul.io/docs/k8s/helm
consul:
  # Whether or not to deploy a Consul instance
  enabled: true

# Common configuration
common:
  # A list of subdomains that cannot be used for Zenith services
  # The registrar subdomain will be included in addition to this list
  reservedSubdomains: []
  # Ingress configuration
  ingress:
    # The base domain to use for services exposed by Zenith
    # Proxied services will be made available at <subdomain>.<base domain>
    baseDomain:
    # The subdomain that will be reserved for the registrar
    registrarSubdomain: registrar
    # The ingress class to use
    className: nginx
    # The common annotations for ingress resources
    annotations: {}
    # The TLS configuration
    tls:
      # Indicates if TLS should be enabled
      enabled: true
      # The name of a secret containing a wildcard certificate
      secretName:
  # Consul configuration
  consul:
    # The address of the Consul server
    address: "{{ .Release.Name }}-consul-server"
    # The port of the Consul server
    port: 8500
    # The tag to use for identifying Zenith services in Consul
    serviceTag: "zenith-service"
    # The prefix to use for additional service information for Zenith services in Consul KV
    serviceKeyPrefix: "zenith-services"
    # The prefix to use for registrar information in Consul KV
    registrarKeyPrefix: "zenith-registrar"

sync:
  enabled: true
  # Configuration for the sync component
  # Defaults are taken from the common configuration where appropriate
  config:
    # # The Consul configuration
    # consul:
    #   # The address of the Consul server
    #   address:
    #   # The port of the Consul server
    #   port:
    #   # The tag to use for identifying Zenith services in Consul
    #   serviceTag:
    #   # The prefix to use for additional service information for Zenith services in Consul KV
    #   tlsKeyPrefix:
    #   # The timeout to use with Consul blocking queries
    #   blockingQueryTimeout:
    # # The Kubernetes configuration
    kubernetes:
    #   # The namespace to create resources in for Zenith services
      namespace: zenith-services
    #   ingress:
    #     # The base domain to use for services exposed by Zenith
    #     baseDomain:
    #     # The ingress class to use
    #     className:
    #     # The annotations to use - these are merged with the common annotations
    #     annotations:
    #     # The TLS configuration
    #     tls:
    #       # Indicates if TLS should be enabled (default true)
    #       enabled:
    #       # The name of a secret containing a wildcard certificate
    #       secretName:
    #     # The external auth configuration
    #     auth:
    #       # The URL for verifying incoming requests
    #       url:
    #       # The URL to redirect to when the verify URL returns a 401
    #       # If not set, the 401 will just be returned
    #       signinUrl:
    #       # The URL parameter to contain the original URL when redirecting to the signin URL
    #       nextUrlParam: next
    #       # List of headers from the authentication response to add to the upstream request
    #       upstreamHeaders: []
  # The image to use for the sync component
  image:
    repository: ghcr.io/stackhpc/zenith-sync
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  # Customise container-level security context for sync pods
  securityContext:
    # By default, require that the container runs as a non-root user with
    # a read-only root filesystem
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  # Resources for sync containers
  resources: {}
  # Configuration for the kubectl proxy container
  kubectlProxy:
    image:
      repository: bitnami/kubectl
      pullPolicy: IfNotPresent
      tag: ""  # Defaults to the Kubernetes version if not given
    securityContext: {}
    resources: {}
  imagePullSecrets: []
  # Customise annotations for sync pods
  podAnnotations: {}
  # Customise pod-level security context for sync pods
  podSecurityContext: {}
  # Customise node selector for sync pods
  nodeSelector: {}
  # Customise tolerations for sync pods
  tolerations: []
  # Customise affinity rules for sync pods
  affinity: {}

sshd:
  enabled: true
  config: {}
    # The address of the Consul agent
    # consulAddress:
    # The port of the Consul agent
    # consulPort:
    # The TTL for the services created in Consul
    # consulServiceTtl:
    # The heartbeat interval for services created in Consul
    # consulHeartbeatInterval:
    # The interval after which a service in Consul will be deregistered
    # consulDeregisterInterval:
    # The number of times that posting a heartbeat to Consul can fail before a tunnel is closed
    # consulHeartbeatFailures:
    # The prefix to use for additional service information for Zenith services in Consul KV
    # consulKeyPrefix:
    # The tag to use when registering services with Consul
    # serviceTag:
    # The number of seconds to wait to receive a tunnel configuration before exiting
    # configureTimeout:
    # A list of subdomains that cannot be used for Zenith services
    # reservedSubdomains:
  # The image to use for the SSHD server
  image:
    repository: ghcr.io/stackhpc/zenith-sshd
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  imagePullSecrets: []
  # The number of SSHD replicas to use
  replicaCount: 1
  # Customise annotations for SSHD pods
  podAnnotations: {}
  # Customise pod-level security context for SSHD pods
  podSecurityContext: {}
  # Customise container-level security context for SSHD pods
  securityContext:
    # By default, require that the container runs as a non-root user with
    # a read-only root filesystem
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  # The service definition for SSHD
  # Because SSH is a TCP service, it cannot be exposed with an Ingress
  # Instead, it must be exposed with a NodePort or LoadBalancer service
  service:
    type: LoadBalancer
    port: 22
    # Use a fixed node port
    # nodePort: 32222
    # Use a fixed load-balancer IP
    # loadBalancerIP:
  # Resources for SSHD containers
  resources: {}
  # Customise node selector for SSHD pods
  nodeSelector: {}
  # Customise tolerations for SSHD pods
  tolerations: []
  # Customise affinity rules for SSHD pods
  affinity: {}


registrar:
  enabled: true
  # The registrar configuration
  config: {}
    # The key that is used to sign the subdomain tokens
    # subdomainTokenSigningKey:
    # The shared token that is permitted to reserve subdomains
    # reserveToken:
    # The shared token that is permitted to verify SSH public keys
    # verifyToken:
    # A list of subdomains that are reserved and cannot be used for Zenith services
    # reservedSubdomains:
    # The set of allowed SSH key types
    # sshAllowedKeyTypes: [ssh-rsa, ssh-ed25519, ...] 
    # The minimum size for RSA keys
    # sshRsaMinBits:
    # The address of the Consul server
    # consulAddress:
    # The port of the Consul server
    # consulPort:
    # The prefix to use for Consul keys (different to the service prefix)
    # consulKeyPrefix:
  # The registrar ingress configuration
  ingress:
    # The host for the ingress resource
    host: "{{ .Values.common.ingress.registrarSubdomain }}.{{ .Values.common.ingress.baseDomain }}"
    # The annotations for the ingress resource
    # annotations:
    # The class name for the ingress resource
    # className:
    # The TLS configuration for the ingress resource
    # tls:
      # Indicates whether TLS should be enabled for the ingress resource
      # enabled: true
      # The name of a secret containing a wildcard certificate, if required
      # secretName:
  # The image to use for the registrar
  image:
    repository: ghcr.io/stackhpc/zenith-registrar
    pullPolicy: IfNotPresent
    tag: ""  # Defaults to appVersion if not given
  imagePullSecrets: []
  # The number of replicas to use
  replicaCount: 1
  # Customise annotations for pods
  podAnnotations: {}
  # Customise pod-level security context
  podSecurityContext: {}
  # Customise container-level security context
  securityContext:
    # By default, require that the container runs as a non-root user with
    # a read-only root filesystem
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  # Resources for containers
  resources: {}
  # Customise node selector for pods
  nodeSelector: {}
  # Customise tolerations for pods
  tolerations: []
  # Customise affinity rules for pods
  affinity: {}
